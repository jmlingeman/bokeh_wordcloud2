{"version":3,"sources":["@@/dist/lib/index.js","@@/dist/lib/typescript/index.js","@@/dist/lib/typescript/extension_bokeh_wordcloud2.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACRA;AACA;AACA;AACA;AACA;AACA,ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"generated.js","sourceRoot":"","sourcesContent":["/* index.js */ function _(require, module, exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const tslib_1 = require(\"tslib\");\n    const WordCloud2 = tslib_1.__importStar(require(\"8dc204e7cb\") /* ./typescript/ */);\n    exports.WordCloud2 = WordCloud2;\n    const base_1 = require(\"@bokeh/bokehjs/base\");\n    base_1.register_models(WordCloud2);\n}\n","/* typescript/index.js */ function _(require, module, exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var extension_bokeh_wordcloud2_1 = require(\"c478435e22\") /* ./extension_bokeh_wordcloud2 */;\n    exports.WordCloud2 = extension_bokeh_wordcloud2_1.WordCloud2;\n}\n","/* typescript/extension_bokeh_wordcloud2.js */ function _(require, module, exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const tslib_1 = require(\"tslib\");\n    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    // import {DataProvider} from \"models/widgets/tables/data_table\";\n    const widget_1 = require(\"@bokeh/bokehjs/models/widgets/widget\");\n    const p = tslib_1.__importStar(require(\"@bokeh/bokehjs/core/properties\"));\n    const cds_view_1 = require(\"@bokeh/bokehjs/models/sources/cds_view\");\n    const widgets_1 = require(\"@bokeh/bokehjs/models/widgets\");\n    const column_data_source_1 = require(\"@bokeh/bokehjs/models/sources/column_data_source\");\n    const object_1 = require(\"@bokeh/bokehjs/core/util/object\");\n    const array_1 = require(\"@bokeh/bokehjs/core/util/array\");\n    const bokeh_events_1 = require(\"@bokeh/bokehjs/core/bokeh_events\");\n    exports.DTINDEX_NAME = \"__bkdt_internal_index__\";\n    function event(event_name) {\n        return function (cls) {\n            cls.prototype.event_name = event_name;\n        };\n    }\n    // @setExperimentalDecorators\n    let WordClickEvent = class WordClickEvent extends bokeh_events_1.BokehEvent {\n        constructor(word, weight) {\n            super();\n            this.word = word;\n            this.weight = weight;\n        }\n        _to_json() {\n            const { word, weight } = this;\n            return { weight, word };\n        }\n    };\n    exports.WordClickEvent = WordClickEvent;\n    WordClickEvent.__name__ = \"WordClickEvent\";\n    exports.WordClickEvent = WordClickEvent = __decorate([\n        event(\"word_click_event\")\n    ], WordClickEvent);\n    // export type myCB<T> = CallbackLike<T, [string,number,number,number,number], Ret>\n    class DataProvider {\n        constructor(source, view) {\n            this.source = source;\n            this.view = view;\n            if (exports.DTINDEX_NAME in this.source.data)\n                throw new Error(`special name ${exports.DTINDEX_NAME} cannot be used as a data table column`);\n            // Convert the bitset into indicies\n            var idx = [];\n            for (const i of this.view.indices) {\n                idx.push(i);\n            }\n            this.index = idx;\n        }\n        getLength() {\n            return this.index.length;\n        }\n        getItem(offset) {\n            const item = {};\n            for (const field of object_1.keys(this.source.data)) {\n                item[field] = this.source.data[field][this.index[offset]];\n            }\n            item[exports.DTINDEX_NAME] = this.index[offset];\n            return item;\n        }\n        getRecords() {\n            return array_1.range(0, this.getLength()).map((i) => this.getItem(i));\n        }\n    }\n    DataProvider.__name__ = \"DataProvider\";\n    function Counter(objects) {\n        const d = {};\n        for (let itm of objects) {\n            d[itm] = d[itm] ? d[itm] + 1 : 1;\n        }\n        return d;\n    }\n    function sortedCounter(objects) {\n        const d = Counter(objects);\n        const arr = Object.keys(d).map((k) => [k, d[k]]);\n        return arr.sort((a, b) => b[1] - a[1]);\n    }\n    function choose(choices) {\n        var index = Math.floor(Math.random() * choices.length);\n        return choices[index];\n    }\n    function choose_str(original_list) {\n        return choose(original_list);\n    }\n    class WordCloud2View extends widget_1.WidgetView {\n        DEFAULT_WEIGHT_FACTOR(size) {\n            return Math.pow(size, 2.3) * this.model.height / 1024;\n        }\n        initialize() {\n            this.DEFAULT_WEIGHT_FACTOR = this.DEFAULT_WEIGHT_FACTOR.bind(this);\n            super.initialize();\n            this.prepare();\n        }\n        prepare() {\n            if (this.model.fontWeight && typeof this.model.fontWeight['execute'] === \"function\") {\n                const cb_func = this.model.weightFactor;\n                this.model.fontWeight = (word, weight, font_size) => {\n                    const data = { word: word, weight: weight, font_size: font_size };\n                    return cb_func.execute(this.model, data);\n                };\n            }\n            if (this.model.weightFactor && typeof this.model.weightFactor['execute'] === \"function\") {\n                const cb_func = this.model.weightFactor;\n                this.model.weightFactor = (size) => {\n                    const data = { size: size };\n                    return cb_func ? cb_func.execute(this.model, data) : this.DEFAULT_WEIGHT_FACTOR;\n                };\n            }\n            if (this.model.classes && typeof this.model.classes['execute'] === \"function\") {\n                const cb_func = this.model.classes;\n                this.model.classes = (word, weight, font_size) => {\n                    const data = { word: word, weight: weight, font_size: font_size };\n                    return cb_func.execute(this.model, data);\n                };\n            }\n            if (this.model.color && typeof this.model.color['execute'] === \"function\") {\n                // its a callback\n                const cb_func = this.model.color;\n                this.model.color = (word, weight, font_size, distance, theta) => {\n                    const data = { word: word, weight: weight, font_size: font_size, distance: distance, theta: theta };\n                    return cb_func.execute(this.model, data);\n                };\n            }\n            else if (typeof this.model.color === \"object\" && typeof this.model.color['slice'] === \"function\") {\n                // its a list??\n                const original_list = this.model.color;\n                this.model.color = () => choose_str(original_list);\n            }\n            else if (typeof this.model.color === \"string\") {\n                const col = this.model.source.get_column(this.model.color);\n                if (col && col.length > 0) {\n                    const data = {};\n                    const colors = this.model.source.get_column(this.model.color);\n                    const keys = this.model.source.get_column(this.model.wordCol);\n                    if (keys && keys.length && colors && colors.length) {\n                        for (let i = 0; i < keys.length; i++) {\n                            if (keys[i] && colors[i]) {\n                                data[keys[i]] = colors[i];\n                            }\n                        }\n                    }\n                    this.model.color = (word) => data[word];\n                }\n            }\n        }\n        // private grid: SlickGrid\n        // update_data() {\n        //     this.model.view.compute_indices()\n        //     this.data.constructor(this.model.source, this.model.view)\n        //     this.render()\n        // }\n        connect_signals() {\n            super.connect_signals();\n            // this.connect(this.model.change, () => this.render())\n            //\n            // this.connect(this.model.source.streaming, () => this.updateGrid())\n            // this.connect(this.model.source.patching, () => this.updateGrid())\n            this.connect(this.model.source.change, () => {\n                this.prepare();\n                this.render();\n            });\n            // this.connect(this.model.source.properties.data.change, () => this.updateGrid())\n            //\n            // this.connect(this.model.source.selected.change, () => this.updateSelection())\n            // this.connect(this.model.source.selected.properties.indices.change, () => this.updateSelection())\n        }\n        css_classes() {\n            return super.css_classes().concat(\"bk-data-table\");\n        }\n        get_sizes1() {\n            if (!this.model.sizeCol) {\n                let words = [];\n                this.data.getRecords().map(record => {\n                    const results = record[this.model.wordCol].toUpperCase().match(/([A-Z]+)/);\n                    words.push(...results);\n                });\n                return sortedCounter(words).slice(0, 50);\n                // console.log(sortedCounter(this.model.source.get_column(this.model.wordCol) as unknown as string[]));\n            }\n            const s = [];\n            this.data.getRecords().map((item) => {\n                s.push([item[this.model.wordCol], item[this.model.sizeCol]]);\n            });\n            return s;\n        }\n        render() {\n            super.render();\n            this.data = new DataProvider(this.model.source, this.model.view);\n            let sizes = this.get_sizes1();\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = this.model.width;\n            canvas.height = this.model.height;\n            // const colors: string[] = this.model.colors ? this.model.colors : [this.model.color,];\n            const default_grid_size = Math.round(16 * this.model.width / 1024);\n            const opts = {\n                list: sizes,\n                fontFamily: this.model.fontFamily ? this.model.fontFamily : 'Times, serif',\n                gridSize: this.model.gridSize ? this.model.gridSize : default_grid_size,\n                weightFactor: this.model.weightFactor ? this.model.weightFactor : this.DEFAULT_WEIGHT_FACTOR,\n                color: this.model.color,\n                rotateRatio: this.model.rotateRatio,\n                minRotation: this.model.minRotation,\n                maxRotation: this.model.maxRotation,\n                rotationSteps: this.model.rotationSteps,\n                shuffle: false,\n                backgroundColor: this.model.background,\n                drawOutOfBound: false,\n                classes: this.model.classes,\n                fontWeight: this.model.fontWeight,\n                shape: this.model.shape,\n                click: (target, dimensions, event) => {\n                    let source = undefined;\n                    if (this.model.sizeCol) {\n                        const len_recs = this.data.getLength();\n                        for (let i = 0; i < len_recs; i++) {\n                            const itm = this.data.getItem(i);\n                            if (itm[this.model.wordCol] === target[0] && itm[this.model.sizeCol] === target[1]) {\n                                source = this.data.source;\n                                source.selected.indices = [i];\n                                break;\n                            }\n                        }\n                    }\n                    if (source === undefined) {\n                        source = new column_data_source_1.ColumnDataSource({\n                            data: {\n                                word: [target[0],],\n                                weight: [target[1],]\n                            }\n                        });\n                        source.selected.indices = [0]; // update our \"selected\" indices ...\n                    }\n                    const data = { word: target[0], weight: target[1], extra: target[2],\n                        dimensions: dimensions, event: event, source: source };\n                    // trigger event to python\n                    // this.model.trigger_event(new WordClickEvent(data.word,data.weight))\n                    // trigger user js click handler\n                    if (this.model.click)\n                        this.model.click.execute(this.model, data);\n                },\n                hover: (!this.model.hover) ? null : (...args) => {\n                    if (this.model.hover) {\n                        if (!args || !args[0])\n                            return;\n                        const data = { word: args[0][0], weight: args[0][1], dimensions: args[1], event: args[2] };\n                        this.model.hover.execute(this.model, data);\n                    }\n                },\n            };\n            this.el.appendChild(canvas);\n            WordCloud(canvas, opts);\n        }\n    }\n    exports.WordCloud2View = WordCloud2View;\n    WordCloud2View.__name__ = \"WordCloud2View\";\n    class WordCloud2 extends widgets_1.Widget {\n        constructor(attrs) {\n            super(attrs);\n        }\n        static initClass() {\n            this.prototype.type = 'WordCloud2';\n            this.prototype.default_view = WordCloud2View;\n            this.define({\n                // every property here should be defined in the namespace above\n                // and in the pyfile with exactly the same name\n                source: [p.Instance],\n                view: [p.Instance, () => new cds_view_1.CDSView()],\n                wordCol: [p.String],\n                sizeCol: [p.String],\n                color: [p.Any, \"blue\"],\n                fontWeight: [p.Any, \"normal\"],\n                classes: [p.Any, null],\n                hover: [p.Instance, null],\n                click: [p.Instance, null],\n                rotateRatio: [p.Number, 1],\n                minRotation: [p.Number, 0],\n                maxRotation: [p.Number, Math.PI / 2],\n                rotationSteps: [p.Number, 32],\n                gridSize: [p.Number, 16],\n                fontFamily: [p.String, \"Times, Serif\"],\n                shape: [p.String, \"square\"],\n                weightFactor: [p.Any, null],\n            });\n            this.override({\n                width: 600,\n                height: 400,\n                background: \"#FFFFFF\",\n            });\n        }\n    }\n    exports.WordCloud2 = WordCloud2;\n    WordCloud2.__name__ = \"WordCloud2\";\n    WordCloud2.initClass();\n}\n"]}